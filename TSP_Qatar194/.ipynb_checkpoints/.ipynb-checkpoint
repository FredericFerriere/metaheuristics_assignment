{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import itertools\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loadData(fileNameStr):\n",
    "    df = pd.read_csv(fileNameStr,sep=' ', header=None)\n",
    "    df.columns = ['cityNumber', 'x', 'y']\n",
    "    xs = df.x\n",
    "    ys = df.y\n",
    "    return xs, ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "xs, ys = loadData('Djibouti_38_coordinates.tsp')\n",
    "numPoints = len(xs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function used to build the distance matrix\n",
    "def distance(point1, point2):\n",
    "    return np.sqrt(sum((point1-point2)**2))\n",
    "\n",
    "def createDistanceMatrix(xs, ys):\n",
    "    numPoints = len(xs)\n",
    "    dists = np.ndarray((numPoints,numPoints))\n",
    "    for i in range(numPoints):\n",
    "        dists[i,i] = 0\n",
    "        for j in range(i+1,numPoints):\n",
    "            dists[i,j] = distance(np.array([xs[i],ys[i]]), np.array([xs[j],ys[j]]))\n",
    "            dists[j,i] = dists[i,j]   \n",
    "    return dists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "dists = createDistanceMatrix(xs, ys)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "def routeLength(path, distancesMatrix):\n",
    "    curLength = distancesMatrix[0,path[0]]\n",
    "    for i in range(len(path)-1):\n",
    "        curLength += distancesMatrix[path[i], path[i+1]]\n",
    "    curLength += distancesMatrix[path[-1],0]\n",
    "    return curLength"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n",
      " 25 26 27 28 29 30 31 32 33 34 35 36 37]\n",
      "17099.017153650082\n"
     ]
    }
   ],
   "source": [
    "curPath = np.array([i for i in range(1,numPoints)])\n",
    "curLength = routeLength(curPath, dists)\n",
    "print(curPath)\n",
    "print(curLength)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def computeBestPath(xs, ys):\n",
    "\n",
    "    g = np.array([np.mean(xs),np.mean(ys)])  # center of gravity\n",
    "    path = []     #points used in the path\n",
    "    path_x = []   #x values of points, used to update g\n",
    "    path_y = []   #y values of points, used to update\n",
    "    outstanding = [i for i in range(numPoints)] \n",
    "\n",
    "    # find 3 closest points to g\n",
    "    sortedOutstanding = sorted(outstanding, key = lambda i: distance(g,np.array([xs[i],ys[i]])))\n",
    "    for i in range(3):\n",
    "        path.append(sortedOutstanding[i])\n",
    "        path_x.append(xs[sortedOutstanding[i]])\n",
    "        path_y.append(ys[sortedOutstanding[i]])\n",
    "\n",
    "    #remove from sortedOutstanding by value\n",
    "    for i in range(3):\n",
    "        outstanding.remove(path[i])\n",
    "\n",
    "    for count in range(0, numPoints-3):\n",
    "    #for count in range(0, 1):    \n",
    "        g = np.array([np.mean(path_x),np.mean(path_y)])\n",
    "        #find closest point to g in list of outstanding points\n",
    "        minDist = distance(g,np.array([xs[outstanding[0]],ys[outstanding[0]]]))\n",
    "        minPos = 0\n",
    "        for i in range(1, len(outstanding)):\n",
    "            compDist = distance(g,np.array([xs[outstanding[i]],ys[outstanding[i]]]))\n",
    "            if compDist < minDist:\n",
    "                minDist = compDist\n",
    "                minPos = i\n",
    "        pNewName = outstanding[minPos]\n",
    "        pNew = np.array([xs[pNewName],ys[pNewName]])\n",
    "\n",
    "        p = np.array([xs[path[-1]],ys[path[-1]]])\n",
    "        pNext = np.array([xs[path[0]],ys[path[0]]])\n",
    "        minDist = distance(pNew,p) + distance(pNew,pNext) - distance(p, pNext)\n",
    "        minPos = -1\n",
    "        for i in range(len(path)-1):\n",
    "            p = np.array([xs[path[i]],ys[path[i]]])\n",
    "            pNext = np.array([xs[path[i+1]],ys[path[i+1]]])\n",
    "            compDist = distance(pNew,p) + distance(pNew,pNext) - distance(p, pNext)\n",
    "            if compDist < minDist:\n",
    "                minDist = compDist\n",
    "                minPos = i\n",
    "        path.insert(minPos+1, pNewName)\n",
    "        path_x.append(xs[pNewName])\n",
    "        path_y.append(ys[pNewName])\n",
    "        outstanding.remove(pNewName)\n",
    "\n",
    "    zeroPos = path.index(0)\n",
    "    res = path[zeroPos+1:] + path[:zeroPos]\n",
    "        \n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.048996686935424805\n"
     ]
    }
   ],
   "source": [
    "startTime = time.time()\n",
    "bestPathTest = computeBestPath(xs, ys)\n",
    "endTime = time.time()\n",
    "runTime = endTime - startTime\n",
    "print(runTime)\n",
    "bestPathLength = routeLength(bestPathTest, dists)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 2, 4, 6, 7, 8, 10, 11, 15, 16, 17, 18, 26, 27, 21, 23, 30, 35, 33, 32, 37, 36, 34, 31, 29, 28, 25, 24, 22, 19, 14, 12, 5, 13, 20, 9]\n",
      "8168.130299691751\n"
     ]
    }
   ],
   "source": [
    "print(bestPathTest)\n",
    "print(bestPathLength)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualiseRoute(xs, ys, path, routeLength):\n",
    "    fig, ax = plt.subplots(1,1)\n",
    "    dash = [5, 5]\n",
    "    #ax.scatter([-5,5],[-5,5], visible=False)\n",
    "    ax.scatter(xs[0],ys[0], color='black')\n",
    "    ax.scatter(xs[1:], ys[1:], color='blue')\n",
    "    ax.plot([xs[0],xs[path[0]]],[ys[0],ys[path[0]]], color='red', dashes=dash)\n",
    "    for i in range(numPoints-2):\n",
    "        ax.plot([xs[path[i]],xs[path[i+1]]],[ys[path[i]],ys[path[i+1]]], color='red', dashes=dash)\n",
    "    ax.plot([xs[0],xs[path[-1]]],[ys[0],ys[path[-1]]], color='red', dashes=dash)    \n",
    "    ax.set_title('Route length: {:.3}'.format(routeLength))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualiseRoute(xs, ys, bestPathTest, bestPathLength)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "GA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "from jmetal.algorithm.singleobjective.genetic_algorithm import GeneticAlgorithm\n",
    "from jmetal.operator import BinaryTournamentSelection\n",
    "from jmetal.operator.crossover import PMXCrossover\n",
    "from jmetal.operator.mutation import PermutationSwapMutation\n",
    "from jmetal.problem.singleobjective.tsp import TSP\n",
    "from jmetal.util.comparator import MultiComparator\n",
    "from jmetal.util.density_estimator import CrowdingDistance\n",
    "from jmetal.util.ranking import FastNonDominatedRanking\n",
    "from jmetal.util.termination_criterion import StoppingByEvaluations\n",
    "from jmetal.core.solution import PermutationSolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "class myTSP(TSP):\n",
    "    def __init__(self, distMatrix, numPoints ):\n",
    "        super(TSP, self).__init__()\n",
    "\n",
    "        self.distance_matrix = distMatrix\n",
    "\n",
    "        self.obj_directions = [self.MINIMIZE]\n",
    "        self.number_of_variables = numPoints\n",
    "        self.number_of_objectives = 1\n",
    "        self.number_of_constraints = 0\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reformatGASolution(gaSol):\n",
    "    zeroPos = gaSol.index(0)\n",
    "    formatgaSol=[]\n",
    "    for i in range(zeroPos+1,numPoints):\n",
    "        formatgaSol.append(gaSol[i])\n",
    "    for i in range(0,zeroPos):\n",
    "        formatgaSol.append(gaSol[i])\n",
    "    return formatgaSol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GA Solution\n",
      "Solution: [3, 2, 4, 15, 17, 11, 10, 18, 27, 30, 35, 32, 37, 31, 34, 36, 33, 26, 16, 14, 29, 13, 1, 5, 6, 7, 8, 12, 23, 21, 19, 24, 22, 25, 28, 20, 9]\n",
      "Fitness: 11130.459743210458\n",
      "Computing time: 2.167181968688965\n",
      "\n",
      "Best Solution\n",
      "best Path: [1, 3, 2, 4, 6, 7, 8, 10, 11, 15, 16, 17, 18, 26, 27, 21, 23, 30, 35, 33, 32, 37, 36, 34, 31, 29, 28, 25, 24, 22, 19, 14, 12, 5, 13, 20, 9]\n",
      "best Path: 8168.130299691751\n"
     ]
    }
   ],
   "source": [
    "problem = myTSP(dists, numPoints)\n",
    "\n",
    "maxGen = 120\n",
    "popSize = 100\n",
    "offSpringSize = 100\n",
    "\n",
    "algorithm = GeneticAlgorithm(\n",
    "    problem=problem,\n",
    "    population_size=popSize,\n",
    "    offspring_population_size=offSpringSize,\n",
    "    mutation=PermutationSwapMutation(1.0 / problem.number_of_variables),\n",
    "    crossover=PMXCrossover(0.7),\n",
    "    selection=BinaryTournamentSelection(\n",
    "    MultiComparator([FastNonDominatedRanking.get_comparator(),\n",
    "                                 CrowdingDistance.get_comparator()])),\n",
    "    termination_criterion=StoppingByEvaluations(max=maxGen*(popSize+offSpringSize))\n",
    "    )\n",
    "\n",
    "algorithm.run()\n",
    "result = algorithm.get_result()\n",
    "gaSol = reformatGASolution(result.variables)\n",
    "print('GA Solution')\n",
    "print('Solution: {}'.format(gaSol))\n",
    "print('Fitness: {}'.format(result.objectives[0]))\n",
    "print('Computing time: {}'.format(algorithm.total_computing_time))\n",
    "\n",
    "print('\\nBest Solution')\n",
    "print('best Path: {}'.format(bestPathTest))\n",
    "print('best Path: {}'.format(bestPathLength))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternative GA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "smallest group: 3\n",
      "biggest group: 9\n"
     ]
    }
   ],
   "source": [
    "numClusters = 6\n",
    "kmeans = KMeans(n_clusters=numClusters, random_state=0).fit(np.column_stack((xs,ys)))\n",
    "xList = []\n",
    "yList = []\n",
    "nameList = []\n",
    "for i in range(numClusters):\n",
    "    xList.append([])\n",
    "    yList.append([])\n",
    "    nameList.append([])\n",
    "    \n",
    "for i in range(numPoints):\n",
    "    groupNum = kmeans.labels_[i]\n",
    "    xList[groupNum].append(xs[i])\n",
    "    yList[groupNum].append(ys[i]) \n",
    "    nameList[groupNum].append(i)\n",
    "\n",
    "print('smallest group: {}'.format(min([len(xi) for xi in xList])))\n",
    "print('biggest group: {}'.format(max([len(xi) for xi in xList])))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualiseGroups(xList, yList):\n",
    "    fig, ax = plt.subplots(1,1)\n",
    "    for i in range(len(xList)):\n",
    "        ax.scatter(xList[i], yList[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualiseGroups(xList,yList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "def TSP_exhaustiveSolve(dists):\n",
    "    # the starting point is assumed to be p_O.\n",
    "    # a path is then just a permutation of points 1,2,...,n\n",
    "    # If we had considered permutations of 0,1,2,...n we would consider the same path several times\n",
    "    # as 0,1,2,...,n is equivalent to 3,4,...,n,0,1,2\n",
    "    # so starting from 0 reduces the number of permutations we need to consider\n",
    "    \n",
    "    # Further optimisation is possible since paths 0,1,2,...,n and 0,n,n-1,...,2,1 are equivalent\n",
    "    \n",
    "    # if we had allowed any point to be the starting point\n",
    "    timeStart = time.time()\n",
    "    numPoints = dists.shape[0]\n",
    "    bestPath = [i for i in range(1, numPoints)]\n",
    "    bestPathLength = routeLength(bestPath, dists)\n",
    "    permIter = itertools.permutations(bestPath)\n",
    "    allPaths = []\n",
    "    keepLoop = True\n",
    "    while keepLoop:\n",
    "        try:\n",
    "            checkPath = next(permIter)\n",
    "            checkPathLength = routeLength(checkPath, dists)\n",
    "            allPaths.append(checkPathLength)\n",
    "            if checkPathLength < bestPathLength:\n",
    "                bestPathLength = checkPathLength\n",
    "                bestPath = [el for el in checkPath]\n",
    "        except StopIteration:\n",
    "            keepLoop = False\n",
    "    timeEnd = time.time()\n",
    "    timeLength = timeEnd-timeStart\n",
    "    \n",
    "    return bestPath, bestPathLength, timeLength"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "#exhaustive search TSP for each subgroup. Could be parallelised\n",
    "\n",
    "distMatrices = []\n",
    "optimalSubPaths = []\n",
    "optimalSubLengths = []\n",
    "for i in range(numClusters):\n",
    "    distMat = createDistanceMatrix(xList[i], yList[i])\n",
    "    optimalSubPath, optimalSubLength, runDuration = TSP_exhaustiveSolve(distMat)\n",
    "    optimalSubPaths.append(optimalSubPath)\n",
    "    optimalSubLengths.append(optimalSubLength)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualiseSubPaths(xList, yList, optimalSubPaths):\n",
    "    fig, ax = plt.subplots(1,1)\n",
    "    \n",
    "    #ax.scatter([-5,5],[-5,5], visible=False)\n",
    "    for i in range(len(xList)):\n",
    "        xs = xList[i]\n",
    "        ys = yList[i]\n",
    "        numPoints = len(xs)\n",
    "        path = optimalSubPaths[i]\n",
    "        ax.scatter(xs, ys, color='blue')\n",
    "        ax.plot([xs[0],xs[path[0]]],[ys[0],ys[path[0]]], color='red')\n",
    "        for i in range(numPoints-2):\n",
    "            ax.plot([xs[path[i]],xs[path[i+1]]],[ys[path[i]],ys[path[i+1]]], color='red')\n",
    "        ax.plot([xs[0],xs[path[-1]]],[ys[0],ys[path[-1]]], color='red')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualiseSubPaths(xList, yList, optimalSubPaths)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "class myTSP2(TSP):\n",
    "    def __init__(self, distMatrix, numPoints, nameList):\n",
    "        super(TSP, self).__init__()\n",
    "\n",
    "        self.distance_matrix = distMatrix\n",
    "        self.name_list = nameList\n",
    "\n",
    "        self.obj_directions = [self.MINIMIZE]\n",
    "        self.number_of_variables = numPoints\n",
    "        self.number_of_objectives = 1\n",
    "        self.number_of_constraints = 0\n",
    "    \n",
    "    def create_solution(self) -> PermutationSolution:\n",
    "        # The idea is to reuse subsequences obtained from piecewise optimisation performed \n",
    "        # on subgroups obtained via kmeans, so that the initial population has \n",
    "        # some preoptimised sequences and convergence might be quicker.\n",
    "        # global recombination from optimised sequences done at random\n",
    "        # can be improved\n",
    "        \n",
    "        new_solution = PermutationSolution(number_of_variables=self.number_of_variables,\n",
    "                                           number_of_objectives=self.number_of_objectives)\n",
    "        #new_solution.variables = random.sample(range(self.number_of_variables), k=self.number_of_variables)\n",
    "        \n",
    "        randShuf = np.arange(len(self.name_list))\n",
    "        np.random.shuffle(randShuf)\n",
    "        \n",
    "        #sampleSol = [pt for pt in nameList[el] for el in randShuf]\n",
    "        sampleSol = []\n",
    "        for el in randShuf:\n",
    "            seq = nameList[el]\n",
    "            for pt in seq:\n",
    "                sampleSol.append(pt)\n",
    "        new_solution.variables = sampleSol\n",
    "        \n",
    "        return new_solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GA Solution\n",
      "Solution: [9, 13, 20, 28, 29, 31, 34, 32, 33, 30, 35, 37, 36, 26, 10, 11, 15, 18, 17, 16, 2, 4, 3, 5, 6, 7, 8, 12, 14, 19, 22, 24, 25, 27, 23, 21, 1]\n",
      "Best Path: 8459.391390776564\n",
      "Computing time: 2.298797607421875\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "problem = myTSP2(dists, numPoints, nameList)\n",
    "\n",
    "maxGen = 60\n",
    "popSize = 200\n",
    "offSpringSize = 200\n",
    "\n",
    "algorithm = GeneticAlgorithm(\n",
    "    problem=problem,\n",
    "    population_size=popSize,\n",
    "    offspring_population_size=offSpringSize,\n",
    "    mutation=PermutationSwapMutation(1.0 / problem.number_of_variables),\n",
    "    crossover=PMXCrossover(0.8),\n",
    "    selection=BinaryTournamentSelection(\n",
    "    MultiComparator([FastNonDominatedRanking.get_comparator(),\n",
    "                                 CrowdingDistance.get_comparator()])),\n",
    "    termination_criterion=StoppingByEvaluations(max=maxGen*(popSize+offSpringSize))\n",
    "    )\n",
    "\n",
    "algorithm.run()\n",
    "result = algorithm.get_result()\n",
    "gaSol = reformatGASolution(result.variables)\n",
    "IGA_bestPath = result.objectives[0]\n",
    "print('GA Solution')\n",
    "print('Solution: {}'.format(gaSol))\n",
    "print('Best Path: {}'.format(IGA_bestPath))\n",
    "print('Computing time: {}'.format(algorithm.total_computing_time))\n",
    "\n",
    "visualiseRoute(xs, ys, gaSol, result.objectives[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
